
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Minh
 */
public class luaThongSoLK extends javax.swing.JFrame {

    /**
     * Creates new form luaThongSoLK
     */
    public luaThongSoLK() {
        initComponents();
        this.setLocationRelativeTo(null);
        SpinnerModel sm = new SpinnerNumberModel(10000000,0,null,100000);
        spnTien.setModel(sm);
        
        chkCPU.setSelected(true);
        chkGPU.setSelected(true);
        chkMain.setSelected(true);
        chkRAM.setSelected(true);
        chkSSD.setSelected(true);
        chkHDD.setSelected(true);
        chkCase.setSelected(true);
        
        chkCPU.setSelected(false);
        chkGPU.setSelected(false);
        chkMain.setSelected(false);
        chkRAM.setSelected(false);
        chkSSD.setSelected(false);
        chkHDD.setSelected(false);
        chkCase.setSelected(false);
                
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        cboMainHang = new javax.swing.JComboBox<String>();
        chkHDD = new javax.swing.JCheckBox();
        cboMainSocket = new javax.swing.JComboBox<String>();
        chkSSD = new javax.swing.JCheckBox();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cboRAMDL = new javax.swing.JComboBox<String>();
        jLabel1 = new javax.swing.JLabel();
        cboUTCPU = new javax.swing.JComboBox<String>();
        cboCPUHang = new javax.swing.JComboBox<String>();
        cboCPUSocket = new javax.swing.JComboBox<String>();
        cboUTGPU = new javax.swing.JComboBox<String>();
        cboUTMain = new javax.swing.JComboBox<String>();
        cboUTHDD = new javax.swing.JComboBox<String>();
        cboUTRAM = new javax.swing.JComboBox<String>();
        jLabel15 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cboUTSSD = new javax.swing.JComboBox<String>();
        jLabel2 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        chkCPU = new javax.swing.JCheckBox();
        cboCPUDoi = new javax.swing.JComboBox<String>();
        chkGPU = new javax.swing.JCheckBox();
        jLabel19 = new javax.swing.JLabel();
        chkMain = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        chkRAM = new javax.swing.JCheckBox();
        jLabelClose = new javax.swing.JLabel();
        jLabelTitle = new javax.swing.JLabel();
        jLabelMinimize = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        spnTien = new javax.swing.JSpinner();
        btnBuild = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        chkCase = new javax.swing.JCheckBox();
        cboUTCase = new javax.swing.JComboBox<String>();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        cboMainChipset = new javax.swing.JComboBox<String>();
        cboMainKT = new javax.swing.JComboBox<String>();
        jLabel28 = new javax.swing.JLabel();
        cboRAMHang = new javax.swing.JComboBox<String>();
        jLabel29 = new javax.swing.JLabel();
        cboRAMBus = new javax.swing.JComboBox<String>();
        jLabel30 = new javax.swing.JLabel();
        cboGPUHang = new javax.swing.JComboBox<String>();
        jLabel31 = new javax.swing.JLabel();
        cboGPUChip = new javax.swing.JComboBox<String>();
        jLabel32 = new javax.swing.JLabel();
        cboGPUMemory = new javax.swing.JComboBox<String>();
        jLabel33 = new javax.swing.JLabel();
        cboGPUDoi = new javax.swing.JComboBox<String>();
        jLabel34 = new javax.swing.JLabel();
        cboHDDHang = new javax.swing.JComboBox<String>();
        jLabel35 = new javax.swing.JLabel();
        cboHDDChuan = new javax.swing.JComboBox<String>();
        jLabel36 = new javax.swing.JLabel();
        cboHDDKT = new javax.swing.JComboBox<String>();
        jLabel37 = new javax.swing.JLabel();
        cboHDDDL = new javax.swing.JComboBox<String>();
        jLabel38 = new javax.swing.JLabel();
        cboSSDHang = new javax.swing.JComboBox<String>();
        jLabel39 = new javax.swing.JLabel();
        cboSSDChuan = new javax.swing.JComboBox<String>();
        jLabel40 = new javax.swing.JLabel();
        cboSSDKT = new javax.swing.JComboBox<String>();
        jLabel41 = new javax.swing.JLabel();
        cboSSDDL = new javax.swing.JComboBox<String>();
        cboCPUXung = new javax.swing.JComboBox<String>();
        jLabel42 = new javax.swing.JLabel();
        cboCPUCore = new javax.swing.JComboBox<String>();
        cboRAMDDR = new javax.swing.JComboBox<String>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cboCaseHang = new javax.swing.JComboBox<String>();
        cboCaseMain = new javax.swing.JComboBox<String>();
        jLabel8 = new javax.swing.JLabel();
        cboCaseKieu = new javax.swing.JComboBox<String>();
        jLabel13 = new javax.swing.JLabel();
        cboCaseMau = new javax.swing.JComboBox<String>();
        jLabel14 = new javax.swing.JLabel();
        cboCaseCL = new javax.swing.JComboBox<String>();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();

        jRadioButton1.setText("jRadioButton1");

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setUndecorated(true);

        cboMainHang.setEnabled(false);
        cboMainHang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMainHangItemStateChanged(evt);
            }
        });

        chkHDD.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkHDDItemStateChanged(evt);
            }
        });

        cboMainSocket.setEnabled(false);
        cboMainSocket.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMainSocketItemStateChanged(evt);
            }
        });

        chkSSD.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkSSDItemStateChanged(evt);
            }
        });

        jLabel21.setText("Hãng");

        jLabel22.setText("Socket");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setText("CPU");

        jLabel23.setText("Dung lượng");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel10.setText("RAM");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel11.setText("GPU");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel12.setText("Disk HDD");

        cboRAMDL.setEnabled(false);
        cboRAMDL.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboRAMDLItemStateChanged(evt);
            }
        });

        jLabel1.setText("Độ ưu tiên linh kiện");

        cboUTCPU.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        cboUTCPU.setEnabled(false);

        cboCPUHang.setEnabled(false);
        cboCPUHang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCPUHangItemStateChanged(evt);
            }
        });

        cboCPUSocket.setEnabled(false);
        cboCPUSocket.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCPUSocketItemStateChanged(evt);
            }
        });

        cboUTGPU.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        cboUTGPU.setEnabled(false);

        cboUTMain.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        cboUTMain.setEnabled(false);

        cboUTHDD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3" }));
        cboUTHDD.setEnabled(false);

        cboUTRAM.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        cboUTRAM.setEnabled(false);

        jLabel15.setText("Hãng");

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel25.setText("Disk SSD");

        jLabel16.setText("Socket");

        jLabel17.setText("Xung");

        cboUTSSD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3" }));
        cboUTSSD.setEnabled(false);

        jLabel2.setText("Chọn");

        jLabel18.setText("Đời");

        chkCPU.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkCPUItemStateChanged(evt);
            }
        });

        cboCPUDoi.setEnabled(false);
        cboCPUDoi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCPUDoiItemStateChanged(evt);
            }
        });

        chkGPU.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkGPUItemStateChanged(evt);
            }
        });

        jLabel19.setText("DDR");

        chkMain.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkMainItemStateChanged(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel20.setText("Mainboard");

        chkRAM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkRAMItemStateChanged(evt);
            }
        });

        jLabelClose.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelClose.setText("X");
        jLabelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelCloseMouseClicked(evt);
            }
        });

        jLabelTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelTitle.setText("Lựa chọn thông số linh kiện");

        jLabelMinimize.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelMinimize.setText("-");
        jLabelMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelMinimizeMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel3.setText("Nhập số tiền:");

        btnBuild.setText("Tiến hành Build PC");
        btnBuild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuildActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("__________________________________________________________________________________________");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("__________________________________________________________________________________________");

        chkCase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkCaseItemStateChanged(evt);
            }
        });

        cboUTCase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        cboUTCase.setEnabled(false);

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel24.setText("Case");

        jLabel26.setText("Chipset");

        jLabel27.setText("Chuẩn kích thước");

        cboMainChipset.setEnabled(false);
        cboMainChipset.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMainChipsetItemStateChanged(evt);
            }
        });

        cboMainKT.setEnabled(false);

        jLabel28.setText("Hãng");

        cboRAMHang.setEnabled(false);
        cboRAMHang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboRAMHangItemStateChanged(evt);
            }
        });

        jLabel29.setText("Bus");

        cboRAMBus.setEnabled(false);

        jLabel30.setText("Hãng");

        cboGPUHang.setEnabled(false);
        cboGPUHang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboGPUHangItemStateChanged(evt);
            }
        });

        jLabel31.setText("Chip đồ họa");

        cboGPUChip.setEnabled(false);
        cboGPUChip.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboGPUChipItemStateChanged(evt);
            }
        });

        jLabel32.setText("VMemory");

        cboGPUMemory.setEnabled(false);
        cboGPUMemory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboGPUMemoryItemStateChanged(evt);
            }
        });

        jLabel33.setText("Thế hệ bộ nhớ");

        cboGPUDoi.setEnabled(false);

        jLabel34.setText("Hãng");

        cboHDDHang.setEnabled(false);
        cboHDDHang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboHDDHangItemStateChanged(evt);
            }
        });

        jLabel35.setText("Chuẩn kết nối");

        cboHDDChuan.setEnabled(false);
        cboHDDChuan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboHDDChuanItemStateChanged(evt);
            }
        });

        jLabel36.setText("Kích thước");

        cboHDDKT.setEnabled(false);
        cboHDDKT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboHDDKTItemStateChanged(evt);
            }
        });

        jLabel37.setText("Dung lượng");

        cboHDDDL.setEnabled(false);

        jLabel38.setText("Hãng");

        cboSSDHang.setEnabled(false);
        cboSSDHang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSSDHangItemStateChanged(evt);
            }
        });

        jLabel39.setText("Chuẩn kết nối");

        cboSSDChuan.setEnabled(false);
        cboSSDChuan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSSDChuanItemStateChanged(evt);
            }
        });

        jLabel40.setText("Kích thước");

        cboSSDKT.setEnabled(false);
        cboSSDKT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSSDKTItemStateChanged(evt);
            }
        });

        jLabel41.setText("Dung lượng");

        cboSSDDL.setEnabled(false);

        cboCPUXung.setEnabled(false);
        cboCPUXung.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCPUXungItemStateChanged(evt);
            }
        });

        jLabel42.setText("Core");

        cboCPUCore.setEnabled(false);

        cboRAMDDR.setEnabled(false);
        cboRAMDDR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboRAMDDRItemStateChanged(evt);
            }
        });

        jLabel6.setText("Hãng");

        jLabel7.setText("Kiểu Mainboard");

        cboCaseHang.setEnabled(false);
        cboCaseHang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCaseHangItemStateChanged(evt);
            }
        });

        cboCaseMain.setEnabled(false);
        cboCaseMain.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCaseMainItemStateChanged(evt);
            }
        });

        jLabel8.setText("Kiểu Case");

        cboCaseKieu.setEnabled(false);
        cboCaseKieu.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCaseKieuItemStateChanged(evt);
            }
        });

        jLabel13.setText("Màu");

        cboCaseMau.setEnabled(false);
        cboCaseMau.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCaseMauItemStateChanged(evt);
            }
        });

        jLabel14.setText("Chất liệu");

        cboCaseCL.setEnabled(false);

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel43.setText("Lưu ý:");

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel44.setText("- Độ ưu tiên càng cao thì ưu tiên linh kiện phù hợp tốt nhất.");

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel45.setText("- Độ ưu tiên disk=0 nghĩa là số lượng disk loại đó là 0.");

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel46.setText("- Thông số None là chọn tất cả sao cho phù hợp.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jLabel26)
                        .addGap(10, 10, 10)
                        .addComponent(cboMainChipset, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel27)
                            .addComponent(jLabel22))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboMainSocket, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboMainKT, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(127, 127, 127)
                                    .addComponent(jLabel32)
                                    .addGap(4, 4, 4)
                                    .addComponent(cboGPUMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(35, 35, 35)
                                    .addComponent(jLabel33)
                                    .addGap(11, 11, 11)
                                    .addComponent(cboGPUDoi, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(chkCPU)
                                    .addGap(31, 31, 31)
                                    .addComponent(jLabel9)
                                    .addGap(44, 44, 44)
                                    .addComponent(jLabel15)
                                    .addGap(14, 14, 14)
                                    .addComponent(cboCPUHang, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel16)
                                    .addGap(10, 10, 10)
                                    .addComponent(cboCPUSocket, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(36, 36, 36)
                                    .addComponent(jLabel18)
                                    .addGap(18, 18, 18)
                                    .addComponent(cboCPUDoi, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(130, 130, 130)
                                    .addComponent(jLabel17)
                                    .addGap(13, 13, 13)
                                    .addComponent(cboCPUXung, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(73, 73, 73)
                                    .addComponent(jLabel42)
                                    .addGap(17, 17, 17)
                                    .addComponent(cboCPUCore, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(chkGPU)
                                    .addGap(32, 32, 32)
                                    .addComponent(jLabel11)
                                    .addGap(56, 56, 56)
                                    .addComponent(jLabel30)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cboGPUHang, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(33, 33, 33)
                                    .addComponent(jLabel31)
                                    .addGap(18, 18, 18)
                                    .addComponent(cboGPUChip, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(53, 53, 53)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cboUTMain, javax.swing.GroupLayout.Alignment.TRAILING, 0, 61, Short.MAX_VALUE)
                                .addComponent(cboUTRAM, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cboUTGPU, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cboUTCPU, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(chkHDD)
                                            .addGap(32, 32, 32)
                                            .addComponent(jLabel12)
                                            .addGap(80, 80, 80)
                                            .addComponent(cboHDDHang, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(122, 122, 122)
                                            .addComponent(jLabel36)
                                            .addGap(18, 18, 18)
                                            .addComponent(cboHDDKT, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(30, 30, 30)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel35)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(cboHDDChuan, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel37)
                                                    .addGap(25, 25, 25)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(cboSSDChuan, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(cboHDDDL, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(chkSSD)
                                                    .addGap(32, 32, 32)
                                                    .addComponent(jLabel25)
                                                    .addGap(39, 39, 39)
                                                    .addComponent(jLabel38))
                                                .addComponent(jLabel19)
                                                .addComponent(jLabel28)
                                                .addComponent(jLabel34)
                                                .addComponent(jLabel40))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(20, 20, 20)
                                                    .addComponent(cboRAMDDR, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(42, 42, 42)
                                                    .addComponent(jLabel29)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(cboRAMBus, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(cboSSDHang, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(cboSSDKT, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGap(18, 18, 18)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel39)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(jLabel41)
                                                            .addGap(25, 25, 25)
                                                            .addComponent(cboSSDDL, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(chkRAM)
                                            .addGap(32, 32, 32)
                                            .addComponent(jLabel10)
                                            .addGap(109, 109, 109)
                                            .addComponent(cboRAMHang, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(4, 4, 4)
                                            .addComponent(jLabel23)
                                            .addGap(10, 10, 10)
                                            .addComponent(cboRAMDL, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(chkMain)
                                            .addGap(32, 32, 32)
                                            .addComponent(jLabel20)
                                            .addGap(44, 44, 44)
                                            .addComponent(jLabel21)
                                            .addGap(21, 21, 21)
                                            .addComponent(cboMainHang, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(136, 136, 136))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(chkCase)
                                    .addGap(32, 32, 32)
                                    .addComponent(jLabel24)
                                    .addGap(35, 35, 35)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cboCaseMain, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 13, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cboCaseHang, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(12, 12, 12)
                                            .addComponent(jLabel13)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(cboCaseMau, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel14)
                                            .addGap(18, 18, 18)
                                            .addComponent(cboCaseCL, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addGap(18, 18, 18)
                                            .addComponent(cboCaseKieu, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(42, 42, 42)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cboUTCase, 0, 61, Short.MAX_VALUE)
                                .addComponent(cboUTSSD, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cboUTHDD, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(spnTien, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(btnBuild, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel46, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(611, 611, 611)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelMinimize)
                        .addGap(27, 27, 27)
                        .addComponent(jLabelClose)
                        .addGap(51, 51, 51))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabelTitle))
                    .addComponent(jLabelMinimize)
                    .addComponent(jLabelClose))
                .addGap(5, 5, 5)
                .addComponent(jLabel4)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(chkCPU))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel9))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(jLabel15))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel16))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(cboCPUSocket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel18)
                                            .addComponent(cboCPUDoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel17))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(cboCPUXung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel42)
                                    .addComponent(cboCPUCore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(cboCPUHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(cboUTCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(chkGPU))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel11))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel30)
                                    .addComponent(cboGPUHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel31)
                                    .addComponent(cboGPUChip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel32))
                            .addComponent(cboGPUMemory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel33))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(cboGPUDoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(cboUTGPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(chkMain))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel20))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel21))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboMainHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22)
                            .addComponent(cboMainSocket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboUTMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel26))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(cboMainChipset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel27))
                    .addComponent(cboMainKT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkRAM)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel10))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboRAMHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel28))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel23))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboRAMDL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboUTRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboRAMDDR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboRAMBus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel29))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel19)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(chkHDD))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel34)
                                    .addComponent(cboHDDHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel35)
                                    .addComponent(cboHDDChuan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cboHDDKT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel36)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel37)
                                    .addComponent(cboHDDDL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(cboUTHDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkSSD)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel39)
                                            .addComponent(cboSSDChuan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel41)
                                    .addComponent(cboSSDKT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboSSDDL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel38)
                                    .addComponent(cboSSDHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel40))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(cboUTSSD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(cboCaseCL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboUTCase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cboCaseHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(chkCase))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel24))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel6)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cboCaseMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(cboCaseKieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboCaseMau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(spnTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel45)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel46)
                    .addComponent(btnBuild, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelCloseMouseClicked

    private void jLabelMinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMinimizeMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabelMinimizeMouseClicked

    private void cboCPUHangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCPUHangItemStateChanged
        if(cboCPUHang.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr("",cboCPUHang, cboCPUSocket, "HangSX", "Socket", "cpu", "");
        if(cboCPUHang.getSelectedItem() == "None")
            MyFunctionc.removeAndDisable(cboCPUDoi, cboCPUXung, cboCPUCore, cboCPUSocket);
    }//GEN-LAST:event_cboCPUHangItemStateChanged

    private void cboCPUSocketItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCPUSocketItemStateChanged
        String dieuKien = "AND HANGSX='" + cboCPUHang.getSelectedItem().toString() + "'";
        if(cboCPUSocket.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxInt(dieuKien ,cboCPUSocket, cboCPUDoi, "Socket", "Series", "cpu", "");
        if(cboCPUSocket.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboCPUDoi, cboCPUXung, cboCPUCore);
            
        }
    }//GEN-LAST:event_cboCPUSocketItemStateChanged

    private void cboCPUDoiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCPUDoiItemStateChanged
        String dieuKien = "AND HANGSX='" + cboCPUHang.getSelectedItem().toString() + "'" +
                " AND Socket ='" + cboCPUSocket.getSelectedItem().toString() + "'";
        if(cboCPUDoi.getSelectedItem() != null){
            MyFunctionc.enableAndUpdateCboxStr(dieuKien ,cboCPUDoi, cboCPUXung, "Series", "Xung", "cpu", "");
        }
        if(cboCPUDoi.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboCPUXung, cboCPUCore);
        }
    }//GEN-LAST:event_cboCPUDoiItemStateChanged

    private void chkCPUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkCPUItemStateChanged
        if(chkCPU.isSelected()){            
            cboUTCPU.setEnabled(true);
            MyFunctionc.enableAndUpdateCboxHang(cboCPUHang,"HangSX","cpu", "");
        }
        else{
            cboUTCPU.setEnabled(false);
            cboUTCPU.setSelectedIndex(0);
            MyFunctionc.removeAndDisable(cboCPUHang,cboCPUSocket,cboCPUDoi, cboCPUXung, cboCPUCore);
            
        }
    }//GEN-LAST:event_chkCPUItemStateChanged

    private void chkGPUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkGPUItemStateChanged
        if(chkGPU.isSelected()){            
            cboUTGPU.setEnabled(true);
            MyFunctionc.enableAndUpdateCboxHang(cboGPUHang,"HangSX","gpu", "");
        }
        else{
            cboUTGPU.setEnabled(false);            
            cboUTGPU.setSelectedIndex(0);
            MyFunctionc.removeAndDisable(cboGPUHang, cboGPUChip, cboGPUDoi, cboGPUMemory);
        }
    }//GEN-LAST:event_chkGPUItemStateChanged

    private void cboGPUHangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboGPUHangItemStateChanged
        if(cboGPUHang.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr("" ,cboGPUHang, cboGPUChip, "HangSX", "Chip_do_hoa", "gpu", "");
        if(cboGPUHang.getSelectedItem() == "None")
            MyFunctionc.removeAndDisable(cboGPUMemory, cboGPUDoi, cboGPUChip);
    }//GEN-LAST:event_cboGPUHangItemStateChanged

    private void cboGPUChipItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboGPUChipItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboGPUHang.getSelectedItem().toString() + "'";
        if(cboGPUChip.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr(dieuKien ,cboGPUChip, cboGPUMemory, "Chip_do_hoa", "VMemory", "gpu", "gb");
        if(cboGPUChip.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboGPUMemory, cboGPUDoi);
        }
    }//GEN-LAST:event_cboGPUChipItemStateChanged

    private void cboGPUMemoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboGPUMemoryItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboGPUHang.getSelectedItem().toString() + "'" +
                " AND Chip_do_hoa ='" + cboGPUChip.getSelectedItem().toString() + "'";
        if(cboGPUMemory.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr(dieuKien, cboGPUMemory, cboGPUDoi, "VMemory", "The_he_bo_nho", "gpu", "");
        if(cboGPUMemory.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboGPUDoi);
        }
    }//GEN-LAST:event_cboGPUMemoryItemStateChanged

    private void chkMainItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkMainItemStateChanged
        if(chkMain.isSelected()){            
            cboUTMain.setEnabled(true);
            MyFunctionc.enableAndUpdateCboxHang(cboMainHang,"HangSX","mainboard", "");
        }
        else{
            cboUTMain.setEnabled(false);
            cboUTMain.setSelectedIndex(0);
            MyFunctionc.removeAndDisable(cboMainHang,cboMainChipset, cboMainSocket, cboMainKT);
        }
    }//GEN-LAST:event_chkMainItemStateChanged

    private void cboMainHangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMainHangItemStateChanged
        if(cboMainHang.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr("", cboMainHang, cboMainSocket, "HangSX", "Socket", "mainboard", "");
        if(cboMainHang.getSelectedItem() == "None")
            MyFunctionc.removeAndDisable(cboMainChipset, cboMainKT, cboMainSocket);
    }//GEN-LAST:event_cboMainHangItemStateChanged

    private void cboMainSocketItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMainSocketItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboMainHang.getSelectedItem().toString() + "'";
        if(cboMainSocket.getSelectedItem() != null){
            MyFunctionc.enableAndUpdateCboxStr(dieuKien ,cboMainSocket, cboMainChipset, "Socket", "Chipset", "mainboard", "");
        }
        if(cboMainSocket.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboMainChipset, cboMainKT);
        }
    }//GEN-LAST:event_cboMainSocketItemStateChanged

    private void chkRAMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkRAMItemStateChanged
        if(chkRAM.isSelected()){            
            cboUTRAM.setEnabled(true);
            MyFunctionc.enableAndUpdateCboxHang(cboRAMHang,"HangSX","ram", "");
        }
        else{
            cboUTRAM.setEnabled(false);
            cboUTRAM.setSelectedIndex(0);
            MyFunctionc.removeAndDisable(cboRAMHang, cboRAMDDR, cboRAMDL, cboRAMBus);
        }
    }//GEN-LAST:event_chkRAMItemStateChanged

    private void cboRAMHangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboRAMHangItemStateChanged
        if(cboRAMHang.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr("" ,cboRAMHang, cboRAMDDR, "HangSX", "DDR", "ram", "");
        if(cboRAMHang.getSelectedItem() == "None")
            MyFunctionc.removeAndDisable(cboRAMDL, cboRAMBus, cboRAMDDR);

    }//GEN-LAST:event_cboRAMHangItemStateChanged

    private void cboRAMDDRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboRAMDDRItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboRAMHang.getSelectedItem().toString() + "'";
        if(cboRAMDDR.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr(dieuKien ,cboRAMDDR, cboRAMDL, "DDR", "Dung_luong", "ram", "gb");
        if(cboRAMDDR.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboRAMDL, cboRAMBus);
        }
    }//GEN-LAST:event_cboRAMDDRItemStateChanged

    private void cboRAMDLItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboRAMDLItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboRAMHang.getSelectedItem().toString() + "'" +
                " AND DDR='" + cboRAMDDR.getSelectedItem().toString() + "'";
        if(cboRAMDL.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr(dieuKien, cboRAMDL, cboRAMBus, "Dung_luong", "Bus", "ram", "");
        if(cboRAMDL.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboRAMBus);
        }
    }//GEN-LAST:event_cboRAMDLItemStateChanged

    private void chkHDDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkHDDItemStateChanged
        if(chkHDD.isSelected()){            
            cboUTHDD.setEnabled(true);
            MyFunctionc.enableAndUpdateCboxDiskStr(cboHDDHang,"HangSX","disk", "", "HDD");
        }
        else{
            cboUTHDD.setEnabled(false);
            cboUTHDD.setSelectedIndex(0);
            MyFunctionc.removeAndDisable(cboHDDHang, cboHDDKT, cboHDDDL, cboHDDChuan);
        }
    }//GEN-LAST:event_chkHDDItemStateChanged

    private void cboHDDHangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboHDDHangItemStateChanged
        if(cboHDDHang.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxDiskStr("",cboHDDHang, cboHDDKT, "HangSX", "Kich_thuoc", "disk", "", "HDD");
        if(cboHDDHang.getSelectedItem() == "None")
            MyFunctionc.removeAndDisable(cboHDDDL, cboHDDChuan, cboHDDKT);
    }//GEN-LAST:event_cboHDDHangItemStateChanged

    private void cboHDDKTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboHDDKTItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboHDDHang.getSelectedItem().toString() + "'";
        if(cboHDDKT.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxDiskStr(dieuKien, cboHDDKT, cboHDDChuan, "Kich_thuoc", "Chuan_ket_noi", "disk", "", "HDD");
        if(cboHDDKT.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboHDDDL, cboHDDChuan);
        }
    }//GEN-LAST:event_cboHDDKTItemStateChanged

    private void cboHDDChuanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboHDDChuanItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboHDDHang.getSelectedItem().toString() + "'" +
                " AND Kich_thuoc='" + cboHDDKT.getSelectedItem().toString() + "'";
        if(cboHDDChuan.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxDiskStr(dieuKien, cboHDDChuan, cboHDDDL, "Chuan_ket_noi", "Dung_luong", "disk", "", "HDD");
        if(cboHDDChuan.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboHDDDL);
        }
    }//GEN-LAST:event_cboHDDChuanItemStateChanged

    private void chkSSDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkSSDItemStateChanged
        if(chkSSD.isSelected()){            
            cboUTSSD.setEnabled(true);
            MyFunctionc.enableAndUpdateCboxDiskStr(cboSSDHang,"HangSX","disk", "", "SSD");
        }
        else{
            cboUTSSD.setEnabled(false);
            cboUTSSD.setSelectedIndex(0);
            MyFunctionc.removeAndDisable(cboSSDHang, cboSSDKT, cboSSDDL, cboSSDChuan);
        }
        
    }//GEN-LAST:event_chkSSDItemStateChanged

    private void cboSSDHangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSSDHangItemStateChanged
        if(cboSSDHang.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxDiskStr("", cboSSDHang, cboSSDKT, "HangSX", "Kich_thuoc", "disk", "", "SSD");
        if(cboSSDHang.getSelectedItem() == "None")
            MyFunctionc.removeAndDisable(cboSSDDL, cboSSDChuan, cboSSDKT);
    }//GEN-LAST:event_cboSSDHangItemStateChanged

    private void cboSSDKTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSSDKTItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboSSDHang.getSelectedItem().toString() + "'";
        if(cboSSDKT.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxDiskStr(dieuKien, cboSSDKT, cboSSDChuan, "Kich_thuoc", "Chuan_ket_noi", "disk", "", "SSD");
        if(cboSSDKT.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboSSDDL, cboSSDChuan);
        }
    }//GEN-LAST:event_cboSSDKTItemStateChanged

    private void cboSSDChuanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSSDChuanItemStateChanged
        String dieuKien = " AND HANGSX ='" + cboSSDHang.getSelectedItem().toString() + "'" +
                " AND Kich_thuoc='" + cboSSDKT.getSelectedItem().toString() + "'";
        if(cboSSDChuan.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxDiskStr("", cboSSDChuan, cboSSDDL, "Chuan_ket_noi", "Dung_luong", "disk", "", "SSD");
        if(cboSSDChuan.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboSSDDL);
        }
    }//GEN-LAST:event_cboSSDChuanItemStateChanged

    private void chkCaseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkCaseItemStateChanged
        if(chkCase.isSelected()){            
            cboUTCase.setEnabled(true);
            MyFunctionc.enableAndUpdateCboxHang(cboCaseHang,"HangSX","case", "");
        }
        else{
            cboUTCase.setEnabled(false);
            cboUTCase.setSelectedIndex(0);
            MyFunctionc.removeAndDisable(cboCaseHang, cboCaseCL, cboCaseMain, cboCaseKieu, cboCaseMau);
        }
    }//GEN-LAST:event_chkCaseItemStateChanged

    private void cboCaseHangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCaseHangItemStateChanged
        if(cboCaseHang.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr("",cboCaseHang, cboCaseMain, "HangSX", "Kieu_mainboard", "case", "");
        if(cboCaseHang.getSelectedItem() == "None")
            MyFunctionc.removeAndDisable(cboCaseKieu, cboCaseMau, cboCaseCL, cboCaseMain);
    }//GEN-LAST:event_cboCaseHangItemStateChanged

    private void cboCaseMainItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCaseMainItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboCaseHang.getSelectedItem().toString() + "'";
        if(cboCaseMain.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr(dieuKien, cboCaseMain, cboCaseKieu, "Kieu_mainboard", "Kieu_case", "case", "");
        if(cboCaseMain.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboCaseKieu, cboCaseMau, cboCaseCL);
        }
    }//GEN-LAST:event_cboCaseMainItemStateChanged

    private void cboCaseKieuItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCaseKieuItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboCaseHang.getSelectedItem().toString() + "'" +
                " AND Kieu_mainboard='" + cboCaseMain.getSelectedItem().toString() + "'";
        if(cboCaseKieu.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr(dieuKien, cboCaseKieu, cboCaseMau, "Kieu_case", "Mau", "case", "");
        if(cboCaseKieu.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboCaseMau, cboCaseCL);
        }
    }//GEN-LAST:event_cboCaseKieuItemStateChanged

    private void cboCaseMauItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCaseMauItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboCaseHang.getSelectedItem().toString() + "'" +
                " AND Kieu_mainboard='" + cboCaseMain.getSelectedItem().toString() + "'" +
                " AND Kieu_case='" + cboCaseKieu.getSelectedItem().toString() + "'";
        if(cboCaseMau.getSelectedItem() != null)
            MyFunctionc.enableAndUpdateCboxStr(dieuKien, cboCaseMau, cboCaseCL, "Mau", "Chat_lieu", "case", "");
        if(cboCaseMau.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboCaseCL);
        }
    }//GEN-LAST:event_cboCaseMauItemStateChanged

    private void btnBuildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuildActionPerformed
        int W = Integer.parseInt(spnTien.getValue().toString());
        int TGT = 0;
        int CT;
        tongHopLK dsDVChon = new tongHopLK();
        dsDVChon.setW(W);
        tongHopLK dsTongHop = new tongHopLK(); 
        
        String CPUhang = cboCPUHang.getSelectedItem().toString();
        String CPUseries = cboCPUDoi.getSelectedItem().toString();
        String CPUcore = cboCPUCore.getSelectedItem().toString();
        String CPUxung = cboCPUXung.getSelectedItem().toString();
        String CPUsocket = cboCPUSocket.getSelectedItem().toString();
        
        String GPUhang = cboGPUHang.getSelectedItem().toString();
        String GPUchip = cboGPUChip.getSelectedItem().toString();
        String GPUVMemory = cboGPUMemory.getSelectedItem().toString();
        String GPUthehe = cboGPUDoi.getSelectedItem().toString();
        
        String Mainhang = cboMainHang.getSelectedItem().toString();
        String Mainsocket = cboMainSocket.getSelectedItem().toString();
        String Mainchipset = cboMainChipset.getSelectedItem().toString();
        String MainchuanKT = cboMainKT.getSelectedItem().toString();
        
        String RAMhang = cboRAMHang.getSelectedItem().toString();
        String RAMddr = cboRAMDDR.getSelectedItem().toString();
        String RAMdl = cboRAMDL.getSelectedItem().toString();
        String RAMbus = cboRAMBus.getSelectedItem().toString();
        
        String HDDhang = cboHDDHang.getSelectedItem().toString();
        String HDDchuanKN = cboHDDChuan.getSelectedItem().toString();
        String HDDkt = cboHDDKT.getSelectedItem().toString();
        String HDDdl = cboHDDDL.getSelectedItem().toString();
        
        String SSDhang = cboSSDHang.getSelectedItem().toString();
        String SSDchuanKN = cboSSDChuan.getSelectedItem().toString();
        String SSDkt = cboSSDKT.getSelectedItem().toString();
        String SSDdl = cboSSDDL.getSelectedItem().toString();
        
        String Casehang = cboCaseHang.getSelectedItem().toString();
        String CasekieuCase = cboCaseKieu.getSelectedItem().toString();
        String Casemau = cboCaseMau.getSelectedItem().toString();
        String CasekieuMain = cboCaseMain.getSelectedItem().toString();
        String CasechatLieu = cboCaseCL.getSelectedItem().toString();
        
        int[] doUuTien = {Integer.parseInt(cboUTCPU.getSelectedItem().toString()), Integer.parseInt(cboUTGPU.getSelectedItem().toString()),
        Integer.parseInt(cboUTMain.getSelectedItem().toString()), Integer.parseInt(cboUTRAM.getSelectedItem().toString()), 
        Integer.parseInt(cboUTHDD.getSelectedItem().toString()), Integer.parseInt(cboUTSSD.getSelectedItem().toString()),
        Integer.parseInt(cboUTCase.getSelectedItem().toString())};
        
        int sLLK=0;
        for(int i=0;i<doUuTien.length;i++){
            if(doUuTien[i] != 0)
                sLLK++;
        }
      
        String[] tenLoai = {"CPU","GPU","Mainboard","RAM","HDD","SSD","Case"};
        LoaiLinhKien[] loaiLK = new LoaiLinhKien[7];
        for(int i=0;i<tenLoai.length;i++){
            loaiLK[i] = new LoaiLinhKien();
            loaiLK[i].setLoai(tenLoai[i]);
            loaiLK[i].setDoUuTien(doUuTien[i]);
        }
               
        int maxUT=0;
        maxUT = MyFunctionc.maxUT(doUuTien);
        
        if(Integer.parseInt(cboUTSSD.getSelectedItem().toString()) != 0 || Integer.parseInt(cboUTHDD.getSelectedItem().toString()) != 0){
            for(int i=maxUT;i>0;i--){
                for(int j=0;j<tenLoai.length;j++){
                    if(loaiLK[j].getDoUuTien() == i){
                        switch (loaiLK[j].getLoai()){                            
                            case "CPU" :
                                loaiLK[j].setSL(DBConnect.getCountCPU(CPUhang, CPUseries, CPUcore, CPUxung, CPUsocket));
                                loaiLK[j].setLK(DBConnect.getCPU(CPUhang, CPUseries, CPUcore, CPUxung, CPUsocket)
                                        , loaiLK[j].getSL());
                                break;
                            case "GPU" :
                                loaiLK[j].setSL(DBConnect.getCountGPU(GPUhang, GPUchip, GPUVMemory, GPUthehe));
                                loaiLK[j].setLK(DBConnect.getGPU(GPUhang, GPUchip, GPUVMemory, GPUthehe),loaiLK[j].getSL());
                                break;
                            case "Mainboard" :
                                loaiLK[j].setSL(DBConnect.getCountMain(Mainhang, Mainsocket, Mainchipset, MainchuanKT));
                                loaiLK[j].setLK(DBConnect.getMain(Mainhang, Mainsocket, Mainchipset, MainchuanKT)
                                        ,loaiLK[j].getSL());
                                break;
                            case "RAM" :
                                loaiLK[j].setSL(DBConnect.getCountRAM(RAMhang, RAMddr, RAMdl, RAMbus));
                                loaiLK[j].setLK(DBConnect.getRAM(RAMhang, RAMddr, RAMdl, RAMbus),loaiLK[j].getSL());
                                break;
                            case "HDD" :
                                loaiLK[j].setSL(DBConnect.getCountDisk(HDDhang, "HDD", HDDchuanKN, HDDkt, HDDdl));
                                loaiLK[j].setLK(DBConnect.getDisk(HDDhang, "HDD", HDDchuanKN, HDDkt, HDDdl),loaiLK[j].getSL());
                                break;
                            case "SSD" :
                                loaiLK[j].setSL(DBConnect.getCountDisk(SSDhang, "SSD", SSDchuanKN, SSDkt, SSDdl));
                                loaiLK[j].setLK(DBConnect.getDisk(SSDhang, "SSD", SSDchuanKN, SSDkt, SSDdl),loaiLK[j].getSL());
                                break;
                            case "Case" :
                                loaiLK[j].setSL(DBConnect.getCountCase(Casehang, CasekieuCase, Casemau, CasekieuMain, CasechatLieu));
                                loaiLK[j].setLK(DBConnect.getCase(Casehang, CasekieuCase, Casemau, CasekieuMain, CasechatLieu)
                                        ,loaiLK[j].getSL());
                                break;
                            default: 
                                System.out.println("Sai rồi");
                        }
                        if(loaiLK[j].getSL() == 1){
                            loaiLK[j].setDaLay(true);
                            dsDVChon.themLK(loaiLK[j].getLinhkien(0), loaiLK[j].getLoai(),
                                loaiLK[j].getLinhkien(0).getGia() * loaiLK[j].getDoUuTien());
                            W = W - loaiLK[j].getLinhkien(0).getGia();
                            TGT = TGT + loaiLK[j].getLinhkien(0).getGia() *  i;
                        }        
                    }
                }
            }
            
            if(W<0){
                JOptionPane.showMessageDialog(this, "Số tiền không đủ mua linh kiện ghép PC hoàn chỉnh", "Thông báo", 
                    JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                dsTongHop.setW(W);
                dsTongHop.setTGT(TGT);
                for(int i=0;i<tenLoai.length;i++)
                    if(loaiLK[i].getDaLay() == false)
                        for(int j=0;j<loaiLK[i].getSL();j++)
                            dsTongHop.themLK(loaiLK[i].getLinhkien(j), loaiLK[i].getLoai(), 
                                    loaiLK[i].getLinhkien(j).getGia() * loaiLK[i].getDoUuTien());
                dsTongHop.BubbleSort();
                int[] x = new int[dsTongHop.getdsdv().length];
                boolean[] bool = new boolean[tenLoai.length];
                for(int i=0;i<tenLoai.length;i++){
                    bool[i] = loaiLK[i].getDaLay();
                }
                //dsTongHop.inDSDV();
                MyFunctionc.nhanhCan(0, x, bool, loaiLK, dsTongHop, sLLK);
                //dsTongHop.inDSChon();
                dsDVChon.themDSLK(dsTongHop.getDSDVChon(), dsTongHop.getDSLoaiChon(), dsTongHop.getDSGiaTriChon());
                dsDVChon.capNhatWvaTGT();
                
                if(dsDVChon.getdsdv().length >=6){
                    //hien thi ket qua
                    ketQua kq = new ketQua(dsDVChon);
                    kq.setVisible(true);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Số tiền không đủ mua linh kiện ghép PC hoàn chỉnh", "Thông báo", 
                        JOptionPane.INFORMATION_MESSAGE);
                }
                
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Độ ưu tiên HDD hoặc SSD phải có 1 loại bằng 1", "Thông báo", 
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnBuildActionPerformed

    private void cboCPUXungItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCPUXungItemStateChanged
        String dieuKien = "AND HANGSX='" + cboCPUHang.getSelectedItem().toString() + "'" +
                " AND Socket ='" + cboCPUSocket.getSelectedItem().toString() + "'" +
                " AND Series=" + cboCPUDoi.getSelectedItem().toString();
        if(cboCPUXung.getSelectedItem() != null){
            MyFunctionc.enableAndUpdateCboxInt(dieuKien ,cboCPUXung, cboCPUCore, "Xung", "Core", "cpu", "");
        }
        if(cboCPUXung.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboCPUCore);
        }
    }//GEN-LAST:event_cboCPUXungItemStateChanged

    private void cboMainChipsetItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMainChipsetItemStateChanged
        String dieuKien = "AND HANGSX ='" + cboMainHang.getSelectedItem().toString() + "'" +
                " AND Socket ='" + cboMainSocket.getSelectedItem().toString() + "'";
        if(cboMainChipset.getSelectedItem() != null){
            MyFunctionc.enableAndUpdateCboxStr(dieuKien, cboMainChipset, cboMainKT, "Chipset", "Chuan_kich_thuoc", "mainboard", "");
        }
        if(cboMainChipset.getSelectedItem() == "None"){
            MyFunctionc.removeAndDisable(cboMainKT);
        }
    }//GEN-LAST:event_cboMainChipsetItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(luaThongSoLK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(luaThongSoLK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(luaThongSoLK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(luaThongSoLK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new luaThongSoLK().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuild;
    private javax.swing.JComboBox<String> cboCPUCore;
    private javax.swing.JComboBox<String> cboCPUDoi;
    private javax.swing.JComboBox<String> cboCPUHang;
    private javax.swing.JComboBox<String> cboCPUSocket;
    private javax.swing.JComboBox<String> cboCPUXung;
    private javax.swing.JComboBox<String> cboCaseCL;
    private javax.swing.JComboBox<String> cboCaseHang;
    private javax.swing.JComboBox<String> cboCaseKieu;
    private javax.swing.JComboBox<String> cboCaseMain;
    private javax.swing.JComboBox<String> cboCaseMau;
    private javax.swing.JComboBox<String> cboGPUChip;
    private javax.swing.JComboBox<String> cboGPUDoi;
    private javax.swing.JComboBox<String> cboGPUHang;
    private javax.swing.JComboBox<String> cboGPUMemory;
    private javax.swing.JComboBox<String> cboHDDChuan;
    private javax.swing.JComboBox<String> cboHDDDL;
    private javax.swing.JComboBox<String> cboHDDHang;
    private javax.swing.JComboBox<String> cboHDDKT;
    private javax.swing.JComboBox<String> cboMainChipset;
    private javax.swing.JComboBox<String> cboMainHang;
    private javax.swing.JComboBox<String> cboMainKT;
    private javax.swing.JComboBox<String> cboMainSocket;
    private javax.swing.JComboBox<String> cboRAMBus;
    private javax.swing.JComboBox<String> cboRAMDDR;
    private javax.swing.JComboBox<String> cboRAMDL;
    private javax.swing.JComboBox<String> cboRAMHang;
    private javax.swing.JComboBox<String> cboSSDChuan;
    private javax.swing.JComboBox<String> cboSSDDL;
    private javax.swing.JComboBox<String> cboSSDHang;
    private javax.swing.JComboBox<String> cboSSDKT;
    private javax.swing.JComboBox<String> cboUTCPU;
    private javax.swing.JComboBox<String> cboUTCase;
    private javax.swing.JComboBox<String> cboUTGPU;
    private javax.swing.JComboBox<String> cboUTHDD;
    private javax.swing.JComboBox<String> cboUTMain;
    private javax.swing.JComboBox<String> cboUTRAM;
    private javax.swing.JComboBox<String> cboUTSSD;
    private javax.swing.JCheckBox chkCPU;
    private javax.swing.JCheckBox chkCase;
    private javax.swing.JCheckBox chkGPU;
    private javax.swing.JCheckBox chkHDD;
    private javax.swing.JCheckBox chkMain;
    private javax.swing.JCheckBox chkRAM;
    private javax.swing.JCheckBox chkSSD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelMinimize;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JSpinner spnTien;
    // End of variables declaration//GEN-END:variables
}
